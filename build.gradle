plugins {
    id "fabric-loom" version "1.5-SNAPSHOT"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url "https://maven.callmeecho.dev/releases" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

loom {
    runs {
        create("datagen") {
            server()
            name("Minecraft Data")
            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
            vmArg("-Dfabric-api.datagen.modid=${project.properties.archives_base_name}")

            runDir("build/datagen")
        }
    }

    accessWidenerPath = file("src/main/resources/hollow.accesswidener")
}

sourceSets {
    main {
        resources {
            srcDir(file("src/main/generated"))
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include "dev.callmeecho:CabinetAPI:${project.cabinet_version}"
    modImplementation "dev.callmeecho:CabinetAPI:${project.cabinet_version}"
    
    modCompileOnly "maven.modrinth:lambdynamiclights:2.3.2+1.20.1"
}

processResources {
    inputs.property "version", project.properties.version
    inputs.property "minecraft_version", project.properties.minecraft_version
    inputs.property "loader_version", project.properties.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.properties.minecraft_version,
                "loader_version": project.properties.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.properties.archives_base_name}" }
    }
}
